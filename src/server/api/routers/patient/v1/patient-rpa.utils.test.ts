import { expect, it } from '@jest/globals';
import { AssessmentAnswer, AssessmentAnswerIntegrationStatus } from '@prisma/client';
import { JsonValue } from '@prisma/client/runtime/library';
import { CustomAssessmentNumber } from '~/assessments/apricot/custom';
import { DataRendererOptions } from '~/assessments/apricot/data-renderers/options';
import { getLocalConfiguration } from '~/assessments/configurations';
import { backOfficeCompletedConfig } from '~/assessments/home-care-home-base/orgs/accentra/backOfficeCompletedConfig';
import { AssessmentQuestionSources, AssessmentQuestionType, QuestionSource } from '~/assessments/types';
import {
	expectedMedicationRpaResponse,
	sampleConfig,
	testMedicationCheckedResponse,
} from '~/common/testUtils/generateFakeAnswers';
import { samplePatientWithJoins } from '~/common/testUtils/seedPatients';
import { CheckedResponseUnion } from '~/server/api/routers/assessment/assessment.inputs';
import {
	RpaAssessmentAnswerWithQuestionText,
	generateAnswer,
	getAnswersForQuestionSource,
	getGeneratedBlankAnswers,
	getOriginalResponseText,
	rollupQuestionsMarkedForRollup,
} from './patient-rpa.utils';

const sampleQuestions: RpaAssessmentAnswerWithQuestionText[] = [
	generateAnswer('AC2022', 'Test 1', 'Yes', AssessmentQuestionType.FreeForm),
	generateAnswer('AC2024', 'Test 2', 'No', AssessmentQuestionType.FreeForm),
	generateAnswer('no-roll-up', 'Test 3', 'Test', AssessmentQuestionType.FreeForm),
];

describe('Patient RPA Utils', () => {
	describe('rollupQuestionsMarkedForRollup', () => {
		it('Should rollup any items marked for rollup', () => {
			const result = rollupQuestionsMarkedForRollup(backOfficeCompletedConfig, sampleQuestions);

			expect(result).toEqual([
				{
					assessmentNumber: 'no-roll-up',
					checkedResponse: {
						choice: 'Test',
					},
					integrationMessage: null,
					integrationStatus: 'Pending',
					mappedType: 'FreeForm',
					questionText: 'Test 3',
				},
				{
					assessmentNumber: 'start_of_care_narrative_note',
					checkedResponse: {
						choice: `Test 1: Yes\nTest 2: No\n`,
					},
					integrationMessage: null,
					integrationStatus: 'Pending',
					mappedType: 'FreeForm',
					questionText: 'Start of Care Narrative Note',
				},
			]);
		});
	});
});

describe('getAllGeneratedAnswers', () => {
	it('Get all autogenerated answers', () => {
		const allFields = getGeneratedBlankAnswers();
		expect(allFields).toMatchSnapshot();
	});
});

describe('getOriginalResponseText', () => {
	const config = getLocalConfiguration('Accentra');
	const physicalAssessmentQuestion = config.allQuestions.find((q) => q.id === 'PA-97a6bd')!;
	const testAnswer: Partial<AssessmentAnswer> = {
		checkedResponse: { choice: ['Patient Name', 'Date of Birth'] },
	};

	it('Returns original text in checkedResponse.choice', () => {
		expect(physicalAssessmentQuestion).toBeDefined();
		const response = getOriginalResponseText(
			testAnswer.checkedResponse as CheckedResponseUnion,
			physicalAssessmentQuestion,
		);
		expect(response).toEqual({ choice: ['PATIENT NAME', 'DATE OF BIRTH'] });
	});
});

describe('getAnswersForQuestionSource', () => {
	it('Should return answers for a given question source', () => {
		const sampleAssessments: Partial<AssessmentAnswer>[] = [
			{
				assessmentNumber: 'A1005',
				checkedResponse: { choice: ['Yes, Mexican, Mexican American, Chicano/a'] },
				integrationMessage: null,
				integrationStatus: 'Pending',
			},
		];
		const questionSource = { id: 'A1005', source: AssessmentQuestionSources.Oasis } as QuestionSource;
		const answers = getAnswersForQuestionSource(
			questionSource,
			samplePatientWithJoins,
			sampleAssessments as AssessmentAnswer[],
			sampleConfig,
		);
		expect(answers).toEqual({
			assessmentNumber: 'A1005',
			questionText: '(A1005) ARE YOU OF HISPANIC, LATINO/A, OR SPANISH ORIGIN? CHECK ALL THAT APPLY.',
			mappedType: 'SelectAllThatApply',
			checkedResponse: { choice: ['B. YES, MEXICAN, MEXICAN AMERICAN, CHICANO/A'] },
			integrationMessage: null,
			integrationStatus: 'Pending',
		});
	});
	it('Should return auto rendered answers', () => {
		const questionSource = { patientDataResolver: DataRendererOptions.DRIVE_TIME } as QuestionSource;
		const answers = getAnswersForQuestionSource(questionSource, samplePatientWithJoins, [], sampleConfig);
		expect(answers).toEqual([
			{
				assessmentNumber: 'CUS09',
				questionText: 'Drive time',
				mappedType: 'FreeForm',
				checkedResponse: { choice: 25 },
				integrationMessage: null,
				integrationStatus: 'Pending',
			},
		]);
	});

	it('Should return medication answers', () => {
		const testAssessment: Partial<AssessmentAnswer> = {
			assessmentNumber: CustomAssessmentNumber.MEDICATIONS,
			checkedResponse: { choice: { medications: [testMedicationCheckedResponse] as JsonValue } },
			integrationMessage: null,
			integrationStatus: 'Pending',
			status: 'Completed',
		};
		const questionSource = {
			id: CustomAssessmentNumber.MEDICATIONS,
			source: AssessmentQuestionSources.Custom,
		} as QuestionSource;
		const answers = getAnswersForQuestionSource(
			questionSource,
			samplePatientWithJoins,
			[testAssessment as AssessmentAnswer],
			sampleConfig,
		);
		expect(answers).toEqual({
			assessmentNumber: CustomAssessmentNumber.MEDICATIONS,
			checkedResponse: { choice: { medications: [expectedMedicationRpaResponse] } },
			integrationMessage: null,
			integrationStatus: 'Pending',
			mappedType: 'Medication',
			questionText: 'Medication List',
		});
	});

	it('should return original text for responses', () => {
		const questionSource = {
			id: 'O0110_A',
			source: AssessmentQuestionSources.Oasis,
		} as QuestionSource;
		const answer = {
			mappedType: 'SelectAllThatApply',
			integrationMessage: null,
			integrationStatus: 'Pending',
			assessmentNumber: 'O0110_A',
			checkedResponse: {
				choice: [
					'Oxygen therapy',
					'IV medications',
					'IV Access',
					'Tracheostomy care',
					'Chemotherapy',
					'Radiation',
					'Suctioning',
					'Invasive mechanical ventilator (ventilator or respirator)',
					'Non-invasive mechanical ventilator',
					'Transfusions',
					'Dialysis',
				],
			},
		} as Partial<AssessmentAnswer>;
		const answers = getAnswersForQuestionSource(
			questionSource,
			samplePatientWithJoins,
			[answer] as AssessmentAnswer[],
			sampleConfig,
		);
		expect(answers).toEqual({
			assessmentNumber: 'O0110_A',
			checkedResponse: {
				choice: [
					'C1. OXYGEN',
					'H1. IV MEDICATIONS',
					'O1. IV ACCESS',
					'E1. TRACHEOSTOMY CARE',
					'A1. CHEMOTHERAPY',
					'B1. RADIATION',
					'D1. SUCTIONING',
					'F1. INVASIVE MECHANICAL VENTILATOR (VENTILATOR OR RESPIRATOR)',
					'G1. NON-INVASIVE MECHANICAL VENTILATOR',
					'I1. TRANSFUSIONS',
					'J1. DIALYSIS',
				],
			},
			integrationMessage: null,
			integrationStatus: 'Pending',
			mappedType: 'SelectAllThatApply',
			questionText:
				'(O0110A) SPECIAL TREATMENTS, PROCEDURES, AND PROGRAMS: CHECK ALL OF THE FOLLOWING TREATMENTS, PROCEDURES, AND PROGRAMS THAT APPLY ON ADMISSION.',
		});
	});

	it('should strip TYPE annotations from originalText fields', () => {
		const questionSource = {
			id: 'PA-f0dc66',
			source: AssessmentQuestionSources.PhysicalAssessment,
		} as QuestionSource;
		const answers = getAnswersForQuestionSource(
			questionSource,
			samplePatientWithJoins,
			[] as AssessmentAnswer[],
			sampleConfig,
		);
		expect(answers).toEqual({
			assessmentNumber: 'PA-f0dc66',
			checkedResponse: {
				choice: null,
			},
			integrationMessage: null,
			integrationStatus: 'Completed',
			mappedType: 'SelectOne',
			questionText: 'WERE NOSE AND SINUSES ASSESSED?',
		});
	});

	it('should strip TYPE annotations from originalText fields for soc standard assessment', () => {
		const questionSource = {
			id: 'EV01',
			source: AssessmentQuestionSources.SOCStandardAssessment,
		} as QuestionSource;
		const answers = getAnswersForQuestionSource(
			questionSource,
			samplePatientWithJoins,
			[] as AssessmentAnswer[],
			sampleConfig,
		);
		expect(answers).toEqual({
			assessmentNumber: 'EV01',
			checkedResponse: {
				choice: null,
			},
			integrationMessage: null,
			integrationStatus: 'Completed',
			mappedType: 'SelectOne',
			questionText: 'DOES THE PATIENT HAVE MEDICARE?',
		});
	});
});

describe('getAnswersForQuestionSource', () => {
	it('should return answers for a given question source', () => {
		const sampleAssessments: Partial<AssessmentAnswer>[] = [
			{
				assessmentNumber: 'PA-97a6bd',
				checkedResponse: { choice: 'mock choice' },
				integrationMessage: null,
				integrationStatus: 'Completed',
				patientId: samplePatientWithJoins.id,
				status: 'Completed',
			},
		];
		const questionSource = {
			id: 'PA-97a6bd',
			source: AssessmentQuestionSources.PhysicalAssessment,
		} as QuestionSource;

		const sampleConfig = getLocalConfiguration('Accentra');

		const answers = getAnswersForQuestionSource(
			questionSource,
			samplePatientWithJoins,
			sampleAssessments as AssessmentAnswer[],
			sampleConfig,
		);

		// TODO: return value of getAnswersForQuestionSource could be an array or an object; could this be consolidated?
		if (typeof answers === 'object' && !Array.isArray(answers)) {
			expect(answers.questionText).toBe('INDICATE TWO PATIENT IDENTIFIERS USED TO IDENTIFY THE PATIENT:');
			expect(answers.integrationStatus).toBe(AssessmentAnswerIntegrationStatus.Completed);
		} else if (Array.isArray(answers) && answers.length > 0) {
			expect(answers[0]?.questionText).toBe('INDICATE TWO PATIENT IDENTIFIERS USED TO IDENTIFY THE PATIENT');
		}
	});

	it('should return auto rendered answers', () => {
		const questionSource = { patientDataResolver: DataRendererOptions.DRIVE_TIME } as QuestionSource;
		const answers = getAnswersForQuestionSource(questionSource, samplePatientWithJoins, [], sampleConfig);
		expect(answers).toEqual([
			{
				assessmentNumber: 'CUS09',
				questionText: 'Drive time',
				mappedType: 'FreeForm',
				checkedResponse: { choice: 25 },
				integrationMessage: null,
				integrationStatus: 'Pending',
			},
		]);
	});
});
